<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.medcognize</groupId>
    <artifactId>medcognize</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <!-- for war should be <packaging>war</packaging> -->
    <packaging>jar</packaging>
    <name>Medcognize</name>
    <description>Track your medical expenses</description>

    <properties>
        <start-class>com.medcognize.MedcognizeApplication</start-class>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <vaadin.version>7.6.2</vaadin.version>
        <lombok.version>1.16.6</lombok.version>
        <lutung.version>0.0.7</lutung.version>
        <guava.version>18.0</guava.version>
        <csveed.version>0.4.2</csveed.version>
        <jodatime.version>2.9.2</jodatime.version>
        <libphonenumber.version>7.2.5</libphonenumber.version>
        <gson.version>2.5</gson.version>
        <commons-lang3.version>3.1</commons-lang3.version>
        <vaadin-spring-boot-starter.version>1.0.0</vaadin-spring-boot-starter.version>

        <!-- Vaadin add-on version -->
        <vaadin-charts.addon.version>2.1.3</vaadin-charts.addon.version>
        <viritin.addon.version>1.44</viritin.addon.version>
        <wizards-for-vaadin.addon.version>1.1.0</wizards-for-vaadin.addon.version>
        <daterangefield.addon.version>1.0.4</daterangefield.addon.version>
        <dcharts-widget.addon.version>1.7.0</dcharts-widget.addon.version>

        <!-- plugins -->
        <vaadin.plugin.version>${vaadin.version}</vaadin.plugin.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.2.RELEASE</version>
    </parent>

    <!-- tag::bom[] -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!-- end::bom[] -->

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-security</artifactId>-->
        <!--</dependency>-->
        <!-- tag::starter[] -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!--
        Needed when using the widgetset optimizer (custom ConnectorBundleLoaderFactory).

        For widgetset compilation, vaadin-client-compiler is automatically added on the
        compilation classpath by vaadin-maven-plugin so normally there is no need for an
        explicit dependency.
        -->
        <!--<dependency>-->
            <!--<groupId>com.vaadin</groupId>-->
            <!--<artifactId>vaadin-client-compiler</artifactId>-->
            <!--<version>${vaadin.version}</version>-->
            <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <!-- https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3 -->
        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-devtools</artifactId>-->
        <!--</dependency>-->

        <!--
        UNCOMMENT IF BUILDING A WAR TO RUN IN TOMCAT
        http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging
        To build a war file that is both executable and deployable into an external container you need
        to mark the embedded container dependencies as “provided”
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        -->

        <!-- By default the scope is runtime.  However, to enable the H2 db console, we need
        the scope to be compile. see:
        https://springframework.guru/using-the-h2-database-console-in-spring-boot-with-spring-security/
        -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <!--<scope>runtime</scope>-->
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>com.vaadin.addon</groupId>
            <artifactId>vaadin-charts</artifactId>
            <version>${vaadin-charts.addon.version}</version>
        </dependency>
        <dependency>
            <groupId>org.vaadin</groupId>
            <artifactId>viritin</artifactId>
            <version>${viritin.addon.version}</version>
        </dependency>
        <dependency>
            <groupId>org.vaadin.addons</groupId>
            <artifactId>wizards-for-vaadin</artifactId>
            <version>${wizards-for-vaadin.addon.version}</version>
        </dependency>
        <dependency>
            <groupId>org.vaadin.addon</groupId>
            <artifactId>daterangefield</artifactId>
            <version>${daterangefield.addon.version}</version>
        </dependency>
        <dependency>
            <groupId>org.vaadin.addons</groupId>
            <artifactId>dcharts-widget</artifactId>
            <version>${dcharts-widget.addon.version}</version>
        </dependency>

        <!-- Lutung - Java Mandrill API -->
        <dependency>
            <groupId>com.mandrillapp.wrapper.lutung</groupId>
            <artifactId>lutung</artifactId>
            <version>${lutung.version}</version>
        </dependency>
        <!-- javax.mail
        Added this dependency when received java.lang.ClassNotFoundException · WebappClassLoader.java:1713
        javax.mail.MessagingException
        According to http://javahonk.com/java-lang-classnotfoundexception-javax-mail-messagingexception/
        it's a function of the version of javax.mail
         -->
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4.7</version>
        </dependency>
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <!-- csveed for csv to bean conversion -->
        <dependency>
            <groupId>org.csveed</groupId>
            <artifactId>csveed</artifactId>
            <version>${csveed.version}</version>
        </dependency>
        <!-- joda-time -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${jodatime.version}</version>
        </dependency>
        <!-- libphonenumber -->
        <dependency>
            <groupId>com.googlecode.libphonenumber</groupId>
            <artifactId>libphonenumber</artifactId>
            <version>${libphonenumber.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--
            see: http://cdn.virit.in/
            some magic I don't understand that compiles vaadin widgetsets
            in the cloud
            -->
            <!--<plugin>-->
                <!--<groupId>in.virit.vwscdn</groupId>-->
                <!--<artifactId>vwscdn-maven-plugin</artifactId>-->
                <!--<version>1.3.6</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<phase>generate-sources</phase>-->
                        <!--<goals>-->
                            <!--<goal>generate</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.plugin.version}</version>
                <configuration>
                    <!-- from https://vaadin.com/forum#!/thread/3187623 -->
                    <gwtSdkFirstInClasspath>true</gwtSdkFirstInClasspath>
                    <extraJvmArgs>-Xmx512M -Xss1024k</extraJvmArgs>
                    <!-- <runTarget>mobilemail</runTarget> -->
                    <!-- We are doing "inplace" but into subdir VAADIN/widgetsets. This
                        way compatible with Vaadin eclipse plugin. -->

                    <webappDirectory>${basedir}/src/main/webapp/VAADIN/widgetsets
                    </webappDirectory>
                    <hostedWebapp>${basedir}/src/main/webapp/VAADIN/widgetsets
                    </hostedWebapp>
                    <noServer>true</noServer>
                    <!-- Remove draftCompile when project is ready -->
                    <draftCompile>false</draftCompile>
                    <compileReport>true</compileReport>
                    <style>OBF</style>
                    <strict>true</strict>
                    <runTarget>http://localhost:8080/</runTarget>
                    <!-- see: http://dev.vaadin.com/ticket/12653 -->
                    <persistentunitcachedir>${project.build.directory}</persistentunitcachedir>
                    <deploy>${project.build.directory}/gwt-deploy</deploy>
                </configuration>
                <executions>
                    <execution>
                        <configuration>
                            <!-- if you don't specify any modules, the plugin will find them -->
                            <!-- <modules> <module>com.vaadin.demo.mobilemail.gwt.ColorPickerWidgetSet</module>
                                </modules> -->
                        </configuration>
                        <goals>
                            <goal>clean</goal>
                            <goal>resources</goal>
                            <goal>update-theme</goal>
                            <goal>update-widgetset</goal>
                            <goal>compile-theme</goal>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- My theme wasn't working properly until I added this because of:
            http://stackoverflow.com/questions/28005671/change-background-color-of-a-layout-vaadin
            and
            http://stackoverflow.com/questions/16561633/vaadin-cannot-find-themes-when-in-productionmode
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <classpathScope>compile</classpathScope>
                            <mainClass>com.vaadin.sass.SassCompiler</mainClass>
                            <arguments>
                                <argument>src/main/webapp/VAADIN/themes/dashboard/styles.scss</argument>
                                <argument>src/main/webapp/VAADIN/themes/dashboard/styles.css</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>vaadin-addons</id>
            <url>http://maven.vaadin.com/vaadin-addons</url>
        </repository>
    </repositories>
</project>
