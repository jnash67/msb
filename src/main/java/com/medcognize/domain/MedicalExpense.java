// Generated by delombok at Sun May 08 23:43:45 EDT 2016
package com.medcognize.domain;

import com.google.common.collect.BiMap;
import com.medcognize.MedcognizeUI;
import com.medcognize.domain.basic.DisplayFriendlyAbstractEntity;
import org.csveed.annotations.CsvDate;
import org.vaadin.addon.daterangefield.DateUtil;
import javax.persistence.Entity;
import javax.validation.constraints.Min;
import java.io.Serializable;
import java.util.Date;
// two expenses are equal if all the fields are equal
@Entity
public class MedicalExpense extends DisplayFriendlyAbstractEntity implements Serializable {

	public static enum MedicalExpenseType {
		DOCTOR, PRESCRIPTION, EMERGENCY;
	}

	public static final MedicalExpenseType defaultMedicalExpenseType = MedicalExpenseType.DOCTOR;


	public static enum PrescriptionTierType {
		TIER1, TIER2, TIER3;
	}

	public static final PrescriptionTierType defaultPrescriptionTierType = PrescriptionTierType.TIER1;
	private static final String medicalExpenseTypeCaptionString = MedicalExpenseType.DOCTOR.toString() + ":Doctor " + "Visit, " + MedicalExpenseType.PRESCRIPTION.toString() + ":Prescription," + MedicalExpenseType.EMERGENCY.toString() + ":Emergency Room";
	private static final String prescriptionTierTypeCaptionString = PrescriptionTierType.TIER1.toString() + ":Tier " + "1," + PrescriptionTierType.TIER2.toString() + ":Tier 2," + PrescriptionTierType.TIER3.toString() + ":Tier 3";
	private static final String captionString = "date:Date, plan:Plan, familyMember:Family Member, provider:Provider, medicalExpenseInPlan:In Plan, medicalExpenseType:Expense Type, prescriptionTierType:Prescription Tier, costAccordingToProvider:Provider Cost, maximumAmount:Maximum Amount, deductibleAmount:Deductible Amount, copayAmount:Copay Amount, outOfPocketAmount:Out of Pocket Amount, paymentAmount:Payment Amount, comments:Comments";
	@SuppressWarnings("UnusedDeclaration")
	public static final BiMap<String, String> captionMap = createBiMap(captionString);
	public static final BiMap<String, String> medicalExpenseTypeStringMap = createBiMap(medicalExpenseTypeCaptionString);
	public static final BiMap<String, String> prescriptionTierStringMap = createBiMap(prescriptionTierTypeCaptionString);
	@CsvDate(format = MedcognizeUI.US_DATE_FORMAT)
	private Date date = DateUtil.now();
	private Plan plan;
	private FamilyMember familyMember;
	private Provider provider;
	private boolean medicalExpenseInPlan;
	private MedicalExpenseType medicalExpenseType = defaultMedicalExpenseType;
	private PrescriptionTierType prescriptionTierType = defaultPrescriptionTierType;
	@Min(0)
	private double outOfPocketAmount = 0.0;
	@Min(0)
	private double costAccordingToProvider = 0.0;
	@Min(0)
	private double maximumAmount = 0.0;
	@Min(0)
	private double deductibleAmount = 0.0;
	@Min(0)
	private double copayAmount = 0.0;
	@Min(0)
	private double paymentAmount = 0.0;
	private String comments = "";

	@SuppressWarnings("UnusedDeclaration")
	public double amountInsuranceWillNotPay() {
		if (maximumAmount >= costAccordingToProvider) {
			return 0;
		}
		return costAccordingToProvider - maximumAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Date getDate() {
		return this.date;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Plan getPlan() {
		return this.plan;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public FamilyMember getFamilyMember() {
		return this.familyMember;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Provider getProvider() {
		return this.provider;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isMedicalExpenseInPlan() {
		return this.medicalExpenseInPlan;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public MedicalExpenseType getMedicalExpenseType() {
		return this.medicalExpenseType;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public PrescriptionTierType getPrescriptionTierType() {
		return this.prescriptionTierType;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getOutOfPocketAmount() {
		return this.outOfPocketAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getCostAccordingToProvider() {
		return this.costAccordingToProvider;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getMaximumAmount() {
		return this.maximumAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getDeductibleAmount() {
		return this.deductibleAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getCopayAmount() {
		return this.copayAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public double getPaymentAmount() {
		return this.paymentAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getComments() {
		return this.comments;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDate(final Date date) {
		this.date = date;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPlan(final Plan plan) {
		this.plan = plan;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setFamilyMember(final FamilyMember familyMember) {
		this.familyMember = familyMember;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setProvider(final Provider provider) {
		this.provider = provider;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMedicalExpenseInPlan(final boolean medicalExpenseInPlan) {
		this.medicalExpenseInPlan = medicalExpenseInPlan;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMedicalExpenseType(final MedicalExpenseType medicalExpenseType) {
		this.medicalExpenseType = medicalExpenseType;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPrescriptionTierType(final PrescriptionTierType prescriptionTierType) {
		this.prescriptionTierType = prescriptionTierType;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setOutOfPocketAmount(final double outOfPocketAmount) {
		this.outOfPocketAmount = outOfPocketAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCostAccordingToProvider(final double costAccordingToProvider) {
		this.costAccordingToProvider = costAccordingToProvider;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMaximumAmount(final double maximumAmount) {
		this.maximumAmount = maximumAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setDeductibleAmount(final double deductibleAmount) {
		this.deductibleAmount = deductibleAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCopayAmount(final double copayAmount) {
		this.copayAmount = copayAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setPaymentAmount(final double paymentAmount) {
		this.paymentAmount = paymentAmount;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setComments(final String comments) {
		this.comments = comments;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "MedicalExpense(date=" + this.getDate() + ", plan=" + this.getPlan() + ", familyMember=" + this.getFamilyMember() + ", provider=" + this.getProvider() + ", medicalExpenseInPlan=" + this.isMedicalExpenseInPlan() + ", medicalExpenseType=" + this.getMedicalExpenseType() + ", prescriptionTierType=" + this.getPrescriptionTierType() + ", outOfPocketAmount=" + this.getOutOfPocketAmount() + ", costAccordingToProvider=" + this.getCostAccordingToProvider() + ", maximumAmount=" + this.getMaximumAmount() + ", deductibleAmount=" + this.getDeductibleAmount() + ", copayAmount=" + this.getCopayAmount() + ", paymentAmount=" + this.getPaymentAmount() + ", comments=" + this.getComments() + ")";
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public MedicalExpense() {
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof MedicalExpense)) return false;
		final MedicalExpense other = (MedicalExpense) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$date = this.getDate();
		final java.lang.Object other$date = other.getDate();
		if (this$date == null ? other$date != null : !this$date.equals(other$date)) return false;
		final java.lang.Object this$plan = this.getPlan();
		final java.lang.Object other$plan = other.getPlan();
		if (this$plan == null ? other$plan != null : !this$plan.equals(other$plan)) return false;
		final java.lang.Object this$familyMember = this.getFamilyMember();
		final java.lang.Object other$familyMember = other.getFamilyMember();
		if (this$familyMember == null ? other$familyMember != null : !this$familyMember.equals(other$familyMember)) return false;
		final java.lang.Object this$provider = this.getProvider();
		final java.lang.Object other$provider = other.getProvider();
		if (this$provider == null ? other$provider != null : !this$provider.equals(other$provider)) return false;
		if (this.isMedicalExpenseInPlan() != other.isMedicalExpenseInPlan()) return false;
		final java.lang.Object this$medicalExpenseType = this.getMedicalExpenseType();
		final java.lang.Object other$medicalExpenseType = other.getMedicalExpenseType();
		if (this$medicalExpenseType == null ? other$medicalExpenseType != null : !this$medicalExpenseType.equals(other$medicalExpenseType)) return false;
		final java.lang.Object this$prescriptionTierType = this.getPrescriptionTierType();
		final java.lang.Object other$prescriptionTierType = other.getPrescriptionTierType();
		if (this$prescriptionTierType == null ? other$prescriptionTierType != null : !this$prescriptionTierType.equals(other$prescriptionTierType)) return false;
		if (java.lang.Double.compare(this.getOutOfPocketAmount(), other.getOutOfPocketAmount()) != 0) return false;
		if (java.lang.Double.compare(this.getCostAccordingToProvider(), other.getCostAccordingToProvider()) != 0) return false;
		if (java.lang.Double.compare(this.getMaximumAmount(), other.getMaximumAmount()) != 0) return false;
		if (java.lang.Double.compare(this.getDeductibleAmount(), other.getDeductibleAmount()) != 0) return false;
		if (java.lang.Double.compare(this.getCopayAmount(), other.getCopayAmount()) != 0) return false;
		if (java.lang.Double.compare(this.getPaymentAmount(), other.getPaymentAmount()) != 0) return false;
		final java.lang.Object this$comments = this.getComments();
		final java.lang.Object other$comments = other.getComments();
		if (this$comments == null ? other$comments != null : !this$comments.equals(other$comments)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof MedicalExpense;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $date = this.getDate();
		result = result * PRIME + ($date == null ? 43 : $date.hashCode());
		final java.lang.Object $plan = this.getPlan();
		result = result * PRIME + ($plan == null ? 43 : $plan.hashCode());
		final java.lang.Object $familyMember = this.getFamilyMember();
		result = result * PRIME + ($familyMember == null ? 43 : $familyMember.hashCode());
		final java.lang.Object $provider = this.getProvider();
		result = result * PRIME + ($provider == null ? 43 : $provider.hashCode());
		result = result * PRIME + (this.isMedicalExpenseInPlan() ? 79 : 97);
		final java.lang.Object $medicalExpenseType = this.getMedicalExpenseType();
		result = result * PRIME + ($medicalExpenseType == null ? 43 : $medicalExpenseType.hashCode());
		final java.lang.Object $prescriptionTierType = this.getPrescriptionTierType();
		result = result * PRIME + ($prescriptionTierType == null ? 43 : $prescriptionTierType.hashCode());
		final long $outOfPocketAmount = java.lang.Double.doubleToLongBits(this.getOutOfPocketAmount());
		result = result * PRIME + (int) ($outOfPocketAmount >>> 32 ^ $outOfPocketAmount);
		final long $costAccordingToProvider = java.lang.Double.doubleToLongBits(this.getCostAccordingToProvider());
		result = result * PRIME + (int) ($costAccordingToProvider >>> 32 ^ $costAccordingToProvider);
		final long $maximumAmount = java.lang.Double.doubleToLongBits(this.getMaximumAmount());
		result = result * PRIME + (int) ($maximumAmount >>> 32 ^ $maximumAmount);
		final long $deductibleAmount = java.lang.Double.doubleToLongBits(this.getDeductibleAmount());
		result = result * PRIME + (int) ($deductibleAmount >>> 32 ^ $deductibleAmount);
		final long $copayAmount = java.lang.Double.doubleToLongBits(this.getCopayAmount());
		result = result * PRIME + (int) ($copayAmount >>> 32 ^ $copayAmount);
		final long $paymentAmount = java.lang.Double.doubleToLongBits(this.getPaymentAmount());
		result = result * PRIME + (int) ($paymentAmount >>> 32 ^ $paymentAmount);
		final java.lang.Object $comments = this.getComments();
		result = result * PRIME + ($comments == null ? 43 : $comments.hashCode());
		return result;
	}
}
