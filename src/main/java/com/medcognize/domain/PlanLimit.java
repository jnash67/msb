// Generated by delombok at Sun May 08 23:43:45 EDT 2016
package com.medcognize.domain;

import com.google.common.collect.BiMap;
import com.medcognize.domain.basic.DisplayFriendlyAbstractEntity;
import javax.persistence.Entity;
import java.io.Serializable;

@Entity
public class PlanLimit extends DisplayFriendlyAbstractEntity implements Serializable {
    private static final String captionString = "limitName:Limit Type, annualLimit:Annual Limit, usage:Amount Used, balance:Remaining Balance";
    @SuppressWarnings("UnusedDeclaration")
    public static final BiMap<String, String> captionMap = createBiMap(captionString);
    String limitName = "";
    double annualLimit = 0.0;
    double usage = 0.0;
    double balance = 0.0;

    public PlanLimit(String limitName, double annualLimit, double usage) {
        this.limitName = limitName;
        this.annualLimit = annualLimit;
        this.usage = usage;
        this.balance = annualLimit - usage;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getLimitName() {
        return this.limitName;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getAnnualLimit() {
        return this.annualLimit;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getUsage() {
        return this.usage;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getBalance() {
        return this.balance;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setLimitName(final String limitName) {
        this.limitName = limitName;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setAnnualLimit(final double annualLimit) {
        this.annualLimit = annualLimit;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setUsage(final double usage) {
        this.usage = usage;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public java.lang.String toString() {
        return "PlanLimit(limitName=" + this.getLimitName() + ", annualLimit=" + this.getAnnualLimit() + ", usage=" + this.getUsage() + ", balance=" + this.getBalance() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof PlanLimit)) return false;
        final PlanLimit other = (PlanLimit) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$limitName = this.getLimitName();
        final java.lang.Object other$limitName = other.getLimitName();
        if (this$limitName == null ? other$limitName != null : !this$limitName.equals(other$limitName)) return false;
        if (java.lang.Double.compare(this.getAnnualLimit(), other.getAnnualLimit()) != 0) return false;
        if (java.lang.Double.compare(this.getUsage(), other.getUsage()) != 0) return false;
        if (java.lang.Double.compare(this.getBalance(), other.getBalance()) != 0) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PlanLimit;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $limitName = this.getLimitName();
        result = result * PRIME + ($limitName == null ? 43 : $limitName.hashCode());
        final long $annualLimit = java.lang.Double.doubleToLongBits(this.getAnnualLimit());
        result = result * PRIME + (int) ($annualLimit >>> 32 ^ $annualLimit);
        final long $usage = java.lang.Double.doubleToLongBits(this.getUsage());
        result = result * PRIME + (int) ($usage >>> 32 ^ $usage);
        final long $balance = java.lang.Double.doubleToLongBits(this.getBalance());
        result = result * PRIME + (int) ($balance >>> 32 ^ $balance);
        return result;
    }
}
