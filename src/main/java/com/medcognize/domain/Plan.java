// Generated by delombok at Sun May 08 23:43:45 EDT 2016
package com.medcognize.domain;

import com.google.common.collect.BiMap;
import com.medcognize.MedcognizeUI;
import com.medcognize.domain.basic.DisplayFriendlyAbstractEntity;
import com.medcognize.domain.validator.jsr303.DateFieldInYear;
import com.medcognize.domain.validator.jsr303.DateFieldOnOrAfter;
import com.medcognize.util.DbUtil;
import org.csveed.annotations.CsvDate;
import org.hibernate.validator.constraints.NotBlank;
import org.vaadin.addon.daterangefield.DateUtil;
import javax.persistence.Entity;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
// Two plans are equal if they have the same name. Plan Name is unique.
@DateFieldOnOrAfter(first = "planEndDate", second = "planStartDate", message = "The end date must be equal to or after the start date")
@DateFieldInYear.List({@DateFieldInYear(dateField = "planStartDate", yearField = "planYear", message = "The start date is not in the year of the plan"), @DateFieldInYear(dateField = "planEndDate", yearField = "planYear", message = "The end date is not in the year of the plan")})
@Entity
public class Plan extends DisplayFriendlyAbstractEntity implements Serializable {

    public static enum PlanType {
        HMO, PPO;
    }

    public static final PlanType defaultPlanType = PlanType.HMO;
    private static final String planTypeCaptionString = PlanType.HMO.toString() + ":HMO, " + "" + PlanType.PPO.toString() + ":PPO";
    private static final String captionString = "planName:Plan Name, activePlan:Is Active Plan, planType:Plan Type, planYear:Year, planStartDate:Period Start, planEndDate:Period End, individualInNetworkDeductible:Individual In Network,familyInNetworkDeductible:Family In Network, individualOutOfNetworkDeductible:Individual Out Of Network, familyOutOfNetworkDeductible:Family Out Of Network, individualOutOfPocketLimit:Individual Out Of Pocket, familyOutOfPocketLimit:Family Out Of Pocket, primaryCareCopay:Primary Care,specialistCopay:Specialist, emergencyRoomCopay:Emergency Room, tier1PrescriptionCopay:Tier 1,tier2PrescriptionCopay:Tier 2, tier3PrescriptionCopay:Tier 3, notes:Notes";
    @SuppressWarnings("UnusedDeclaration")
    public static final BiMap<String, String> captionMap = createBiMap(captionString);
    public static final BiMap<String, String> planTypeStringMap = createBiMap(planTypeCaptionString);
    @NotBlank(message = "The plan name cannot be blank")
    @javax.validation.constraints.Size(max = 50, message = "The plan name must be less than 50 characters long")
    private String planName = "";
    private boolean activePlan = false;
    @NotNull
    private PlanType planType = defaultPlanType;
    public static final int MIN_YEAR = 2012;
    public static final int MAX_YEAR = 2020;
    @Min(value = 2012, message = "Year cannot be before 2012")
    @Max(value = 2020, message = "Year cannot be after 2020")
    private int planYear = DateUtil.currentYear();
    @CsvDate(format = MedcognizeUI.US_DATE_FORMAT)
    private Date planStartDate = DateUtil.firstDayOfYear(DateUtil.currentYear());
    @CsvDate(format = MedcognizeUI.US_DATE_FORMAT)
    private Date planEndDate = DateUtil.lastDayOfYear(DateUtil.currentYear());
    // annual deductibles
    @Min(0)
    private double individualInNetworkDeductible = 0.0;
    @Min(0)
    private double familyInNetworkDeductible = 0.0;
    @Min(0)
    private double individualOutOfNetworkDeductible = 0.0;
    @Min(0)
    private double familyOutOfNetworkDeductible = 0.0;
    // annual out of pocket limits
    @Min(0)
    private double individualOutOfPocketLimit = 0.0;
    @Min(0)
    private double familyOutOfPocketLimit = 0.0;
    // copays
    @Min(0)
    private double primaryCareCopay = 0.0;
    @Min(0)
    private double specialistCopay = 0.0;
    @Min(0)
    private double emergencyRoomCopay = 0.0;
    @Min(0)
    private double tier1PrescriptionCopay = 0.0;
    @Min(0)
    private double tier2PrescriptionCopay = 0.0;
    @Min(0)
    private double tier3PrescriptionCopay = 0.0;
    private String notes = "";

    @Override
    public String toString() {
        if (this.planName.contains(String.valueOf(this.planYear))) {
            return this.planName;
        }
        return this.planName + " (" + this.planYear + ")";
    }

    public static String ensureUniqueName(String initialName) {
        Collection<Plan> pls = DbUtil.getLoggedInUser().getPlans();
        String name = initialName;
        int v = 2;
        while (!existsName(name, pls)) {
            name = initialName + "v" + String.valueOf(v);
            v++;
        }
        return name;
    }

    public static boolean existsName(String name, Collection<Plan> pls) {
        for (Plan p : pls) {
            if (name.equals(p.getPlanName())) {
                return false;
            }
        }
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getPlanName() {
        return this.planName;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean isActivePlan() {
        return this.activePlan;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public PlanType getPlanType() {
        return this.planType;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int getPlanYear() {
        return this.planYear;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Date getPlanStartDate() {
        return this.planStartDate;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Date getPlanEndDate() {
        return this.planEndDate;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getIndividualInNetworkDeductible() {
        return this.individualInNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getFamilyInNetworkDeductible() {
        return this.familyInNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getIndividualOutOfNetworkDeductible() {
        return this.individualOutOfNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getFamilyOutOfNetworkDeductible() {
        return this.familyOutOfNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getIndividualOutOfPocketLimit() {
        return this.individualOutOfPocketLimit;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getFamilyOutOfPocketLimit() {
        return this.familyOutOfPocketLimit;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getPrimaryCareCopay() {
        return this.primaryCareCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getSpecialistCopay() {
        return this.specialistCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getEmergencyRoomCopay() {
        return this.emergencyRoomCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getTier1PrescriptionCopay() {
        return this.tier1PrescriptionCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getTier2PrescriptionCopay() {
        return this.tier2PrescriptionCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public double getTier3PrescriptionCopay() {
        return this.tier3PrescriptionCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getNotes() {
        return this.notes;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setPlanName(final String planName) {
        this.planName = planName;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setActivePlan(final boolean activePlan) {
        this.activePlan = activePlan;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setPlanType(final PlanType planType) {
        this.planType = planType;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setPlanYear(final int planYear) {
        this.planYear = planYear;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setPlanStartDate(final Date planStartDate) {
        this.planStartDate = planStartDate;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setPlanEndDate(final Date planEndDate) {
        this.planEndDate = planEndDate;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setIndividualInNetworkDeductible(final double individualInNetworkDeductible) {
        this.individualInNetworkDeductible = individualInNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setFamilyInNetworkDeductible(final double familyInNetworkDeductible) {
        this.familyInNetworkDeductible = familyInNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setIndividualOutOfNetworkDeductible(final double individualOutOfNetworkDeductible) {
        this.individualOutOfNetworkDeductible = individualOutOfNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setFamilyOutOfNetworkDeductible(final double familyOutOfNetworkDeductible) {
        this.familyOutOfNetworkDeductible = familyOutOfNetworkDeductible;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setIndividualOutOfPocketLimit(final double individualOutOfPocketLimit) {
        this.individualOutOfPocketLimit = individualOutOfPocketLimit;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setFamilyOutOfPocketLimit(final double familyOutOfPocketLimit) {
        this.familyOutOfPocketLimit = familyOutOfPocketLimit;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setPrimaryCareCopay(final double primaryCareCopay) {
        this.primaryCareCopay = primaryCareCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setSpecialistCopay(final double specialistCopay) {
        this.specialistCopay = specialistCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setEmergencyRoomCopay(final double emergencyRoomCopay) {
        this.emergencyRoomCopay = emergencyRoomCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setTier1PrescriptionCopay(final double tier1PrescriptionCopay) {
        this.tier1PrescriptionCopay = tier1PrescriptionCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setTier2PrescriptionCopay(final double tier2PrescriptionCopay) {
        this.tier2PrescriptionCopay = tier2PrescriptionCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setTier3PrescriptionCopay(final double tier3PrescriptionCopay) {
        this.tier3PrescriptionCopay = tier3PrescriptionCopay;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setNotes(final String notes) {
        this.notes = notes;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Plan)) return false;
        final Plan other = (Plan) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$planName = this.getPlanName();
        final java.lang.Object other$planName = other.getPlanName();
        if (this$planName == null ? other$planName != null : !this$planName.equals(other$planName)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Plan;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $planName = this.getPlanName();
        result = result * PRIME + ($planName == null ? 43 : $planName.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Plan() {
    }
}
